// This file was generated by counterfeiter
package fake

import (
	"sync"
	"time"

	"github.com/st3v/cfkit/env"
)

type Client struct {
	RegisterStub        func(app env.App) error
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		app env.App
	}
	registerReturns struct {
		result1 error
	}
	DeregisterStub        func(app env.App) error
	deregisterMutex       sync.RWMutex
	deregisterArgsForCall []struct {
		app env.App
	}
	deregisterReturns struct {
		result1 error
	}
	HeartbeatStub        func(app env.App) error
	heartbeatMutex       sync.RWMutex
	heartbeatArgsForCall []struct {
		app env.App
	}
	heartbeatReturns struct {
		result1 error
	}
	HeartbeatIntervalStub        func() time.Duration
	heartbeatIntervalMutex       sync.RWMutex
	heartbeatIntervalArgsForCall []struct{}
	heartbeatIntervalReturns     struct {
		result1 time.Duration
	}
	AppsStub        func() (map[string][]string, error)
	appsMutex       sync.RWMutex
	appsArgsForCall []struct{}
	appsReturns     struct {
		result1 map[string][]string
		result2 error
	}
	AppStub        func(name string) ([]string, error)
	appMutex       sync.RWMutex
	appArgsForCall []struct {
		name string
	}
	appReturns struct {
		result1 []string
		result2 error
	}
}

func (fake *Client) Register(app env.App) error {
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		app env.App
	}{app})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(app)
	} else {
		return fake.registerReturns.result1
	}
}

func (fake *Client) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *Client) RegisterArgsForCall(i int) env.App {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].app
}

func (fake *Client) RegisterReturns(result1 error) {
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 error
	}{result1}
}

func (fake *Client) Deregister(app env.App) error {
	fake.deregisterMutex.Lock()
	fake.deregisterArgsForCall = append(fake.deregisterArgsForCall, struct {
		app env.App
	}{app})
	fake.deregisterMutex.Unlock()
	if fake.DeregisterStub != nil {
		return fake.DeregisterStub(app)
	} else {
		return fake.deregisterReturns.result1
	}
}

func (fake *Client) DeregisterCallCount() int {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return len(fake.deregisterArgsForCall)
}

func (fake *Client) DeregisterArgsForCall(i int) env.App {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return fake.deregisterArgsForCall[i].app
}

func (fake *Client) DeregisterReturns(result1 error) {
	fake.DeregisterStub = nil
	fake.deregisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *Client) Heartbeat(app env.App) error {
	fake.heartbeatMutex.Lock()
	fake.heartbeatArgsForCall = append(fake.heartbeatArgsForCall, struct {
		app env.App
	}{app})
	fake.heartbeatMutex.Unlock()
	if fake.HeartbeatStub != nil {
		return fake.HeartbeatStub(app)
	} else {
		return fake.heartbeatReturns.result1
	}
}

func (fake *Client) HeartbeatCallCount() int {
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return len(fake.heartbeatArgsForCall)
}

func (fake *Client) HeartbeatArgsForCall(i int) env.App {
	fake.heartbeatMutex.RLock()
	defer fake.heartbeatMutex.RUnlock()
	return fake.heartbeatArgsForCall[i].app
}

func (fake *Client) HeartbeatReturns(result1 error) {
	fake.HeartbeatStub = nil
	fake.heartbeatReturns = struct {
		result1 error
	}{result1}
}

func (fake *Client) HeartbeatInterval() time.Duration {
	fake.heartbeatIntervalMutex.Lock()
	fake.heartbeatIntervalArgsForCall = append(fake.heartbeatIntervalArgsForCall, struct{}{})
	fake.heartbeatIntervalMutex.Unlock()
	if fake.HeartbeatIntervalStub != nil {
		return fake.HeartbeatIntervalStub()
	} else {
		return fake.heartbeatIntervalReturns.result1
	}
}

func (fake *Client) HeartbeatIntervalCallCount() int {
	fake.heartbeatIntervalMutex.RLock()
	defer fake.heartbeatIntervalMutex.RUnlock()
	return len(fake.heartbeatIntervalArgsForCall)
}

func (fake *Client) HeartbeatIntervalReturns(result1 time.Duration) {
	fake.HeartbeatIntervalStub = nil
	fake.heartbeatIntervalReturns = struct {
		result1 time.Duration
	}{result1}
}

func (fake *Client) Apps() (map[string][]string, error) {
	fake.appsMutex.Lock()
	fake.appsArgsForCall = append(fake.appsArgsForCall, struct{}{})
	fake.appsMutex.Unlock()
	if fake.AppsStub != nil {
		return fake.AppsStub()
	} else {
		return fake.appsReturns.result1, fake.appsReturns.result2
	}
}

func (fake *Client) AppsCallCount() int {
	fake.appsMutex.RLock()
	defer fake.appsMutex.RUnlock()
	return len(fake.appsArgsForCall)
}

func (fake *Client) AppsReturns(result1 map[string][]string, result2 error) {
	fake.AppsStub = nil
	fake.appsReturns = struct {
		result1 map[string][]string
		result2 error
	}{result1, result2}
}

func (fake *Client) App(name string) ([]string, error) {
	fake.appMutex.Lock()
	fake.appArgsForCall = append(fake.appArgsForCall, struct {
		name string
	}{name})
	fake.appMutex.Unlock()
	if fake.AppStub != nil {
		return fake.AppStub(name)
	} else {
		return fake.appReturns.result1, fake.appReturns.result2
	}
}

func (fake *Client) AppCallCount() int {
	fake.appMutex.RLock()
	defer fake.appMutex.RUnlock()
	return len(fake.appArgsForCall)
}

func (fake *Client) AppArgsForCall(i int) string {
	fake.appMutex.RLock()
	defer fake.appMutex.RUnlock()
	return fake.appArgsForCall[i].name
}

func (fake *Client) AppReturns(result1 []string, result2 error) {
	fake.AppStub = nil
	fake.appReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}
